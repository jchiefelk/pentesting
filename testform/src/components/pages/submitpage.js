import React, {Component} from 'react';
import { Router, Route, Link } from 'react-router';
import ArticleStore from '../../stores/articlestore';
import Actions from '../../actions/actions';
require('../css/main.css');
var PublishingStore = require('../../stores/publishingstore');
import Style from '../../style/style';
import SubmissionForm from '../jsx/submissionform';
console.log(window.location);

export default class SubmitPage extends Component {

	constructor(){
		super();
		this.state = {
			mainView: null,
			value: null,
			article_store_data: PublishingStore.getArticleData(),
			saved: false,
			image_url: null,
			httpstatus: null,
			message: null,
			formView: null,
			storeUpdated: false,
			firstname: null,
			lastname: null,
			abstract: null,
			article: null,
			subject: null
		};
	}
	componentDidMount(){
		PublishingStore.addChangeListener(this._onChange.bind(this));
		this.setState({
			mainView: SubmissionForm.setMainView(),
			formView: SubmissionForm.setForm()
		});
	}
	componentWillUnmount(){
		PublishingStore.removeChangeListener(this._onChange.bind(this));
	}

	componentDidUpdate(){
		if(this.state.saved==true && this.state.storeUpdated==true){
			this.setState({
				saved: false,
				storeUpdated: false
			});
			this.submitArticle();
		}
	}

	submitArticle(){
		console.log('Article Submitted');
		let article = {
			firstname: this.state.firstname,
			lastname: this.state.lastname,
			abstract: this.state.abstract,
			article: this.state.article,
			subject:  this.state.subject
		};
		Actions.submitArticleToPending(article);
	}

	_onChange(){

		if(PublishingStore.getSubmittedData()!=null){
			SubmissionForm.displayResult(	PublishingStore.getSubmittedData()	);
		}
	
		this.setState({
			httpstatus: PublishingStore.getStatus(),
			message: PublishingStore.getArticleData().status,
			firstname: PublishingStore.getArticleData().firstname,
			lastname: PublishingStore.getArticleData().lastname,
			abstract: PublishingStore.getArticleData().abstract,
			article: PublishingStore.getSubmittedData(),
			subject: PublishingStore.getArticleData().subject,
			storeUpdated: true,
			saved: PublishingStore.getSavedStatus()
		});
		if(this.state.httpstatus==500){
			alert('Internal Server Error 500: Improper Format in One of Responses');
		}	
	}
     
	render(){
		return(
			<div>
           		<div style={{display: 'flex', justifyContent: 'center'}}>
           			<p style={{fontSize: 24, marginTop: 10, color: 'red'}}>{this.state.message}</p>
           		</div>
				{this.state.formView}
				{this.state.mainView}
			</div>
		);
	}
};